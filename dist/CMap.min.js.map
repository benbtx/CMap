{"version":3,"file":"CMap.min.js","sources":["../src/event/index.js","../src/init.js","../src/animate/swing.js","../src/animate/index.js","../src/canvas.js","../src/compute/getMapBlockInfo.js","../src/style.js","../src/compute/methods.js","../src/compute/index.js","../src/draw.js","../src/history.js","../src/index.js"],"sourcesContent":["export function mouseEvt () {\n    let historyIndex = -1\n    let currentMap = null\n    let _blocks = null\n    let _opt = this.options\n    let _callback = _opt.callback\n    let { \n        selectedMode: _selectedMode, \n        style: _BStyle\n    } = _opt.map.blocks\n    let mouseMove = {\n        hold: false,\n        x: 0,\n        y: 0,\n        status: false // 记录是否有移动\n    }\n\n    /**\n     * 判断是否在区块中\n     * @param {number} x x轴移动    \n     * @param {number} y y轴移动\n     * @callback 回调函数\n     */\n    let checkInMap = (x, y, callback) => {\n        if (!currentMap) return {index: -1}\n        \n        const pixel = this.hitCtx.getImageData(x, y, 1, 1).data\n        const color = `rgb(${pixel[0]},${pixel[1]},${pixel[2]})`\n        const shape = currentMap.colorsHash[color] || {index: -1}\n\n        if (shape) callback(shape)\n    }\n\n    // 绘制\n    let draw = () => {\n        this.translateCtx(\n            currentMap,\n            this.mouseEvtData.mapX, \n            this.mouseEvtData.mapY\n        )\n        this.drawAllBoundary()\n    }\n\n    // 判断是否在选择区块中\n    let inHoldBlocks = () => currentMap.holdBlocks.includes(currentMap.mouseMoveIndex)\n\n    /**\n     * @description 回调事件\n     * @param {string} type 事件类型，如:['click','mousemove']\n     * @param {object} data 当前对象\n     * @param {event} evt 鼠标事件 \n     */\n    let callbackEvt = (type, evt, data) => {\n        if (\n            _callback && \n            _callback.hasOwnProperty(type)\n        ) {\n            _callback[type](evt, data)\n        }\n    }\n\n    this.ele.addEventListener('mousemove', evt => {\n        let x = evt.offsetX * this.DPI\n        let y = evt.offsetY * this.DPI\n\n        if (this.inAnimate) return\n\n        // 更新内容\n        if (historyIndex !== this.history.index) {\n            historyIndex = this.history.index\n            currentMap = this.history.map[historyIndex]\n            _blocks = currentMap.blocks\n\n            this.mouseEvtData = {\n                mapX: currentMap.mapTranslateX,\n                mapY: currentMap.mapTranslateY,\n            }\n        }\n\n        // 按住地图时\n        if (evt.buttons && mouseMove.hold) {\n            let _x = x - mouseMove.x + currentMap.mapTranslateX\n            let _y = y - mouseMove.y + currentMap.mapTranslateY\n            \n            if (this.mouseEvtData.mapX - _x || this.mouseEvtData.mapY - _y) {\n                this.mouseEvtData.mapX = _x\n                this.mouseEvtData.mapY = _y\n                \n                mouseMove.status = true\n                draw()\n            }\n        } else {\n            checkInMap(x, y, shape => {\n                let moveIndex = currentMap.mouseMoveIndex\n\n                // 恢复之前鼠标移入对象效果\n                if (shape.index !== moveIndex) {\n                    if (moveIndex > -1) {\n                        _blocks[moveIndex].over = false\n                        draw()\n                    }\n\n                    currentMap.mouseMoveIndex = shape.index\n                    \n                    if (shape.index > -1) {\n                        shape.over = true\n                        callbackEvt('mousemove', evt, shape)\n                        draw()\n                    }\n                } else {\n                    callbackEvt('mousemove', evt, shape)\n                }\n            })\n        }\n\n    })\n\n    this.ele.addEventListener('mousedown', evt => {\n        mouseMove.hold = true\n        mouseMove.x = evt.offsetX * this.DPI\n        mouseMove.y = evt.offsetY * this.DPI\n    })\n\n\n    this.ele.addEventListener('mouseup', evt => {\n        mouseMove.hold = false\n        \n        if (mouseMove.status) {\n            mouseMove.status = false\n\n            // 记录已经移动过的位置\n            currentMap.mapTranslateX = this.mouseEvtData.mapX\n            currentMap.mapTranslateY = this.mouseEvtData.mapY\n\n        } else {\n            let x = evt.offsetX * this.DPI\n            let y = evt.offsetY * this.DPI\n\n            checkInMap(x, y, shape => {\n                if (shape.index === -1) return\n\n                // 存在时，我们移除\n                if (inHoldBlocks(shape.index)) {\n                    let _index = currentMap.holdBlocks.indexOf(shape.index)\n                    \n                    currentMap.holdBlocks.splice(_index, 1)\n                } \n                // 如果不存在，我们添加到存放区\n                else {\n                    if (_selectedMode === 'multiple') {\n                        currentMap.holdBlocks.push(shape.index)\n                    } \n                    else if (_selectedMode === 'single') {\n                        if (currentMap.holdBlocks.length) {\n                            _blocks[currentMap.holdBlocks[0]].style.fillStyle = _BStyle.fillStyle\n                        }\n\n                        currentMap.holdBlocks = [shape.index]\n                    }\n                }\n\n                // 处理存放区内的区块效果\n                currentMap.holdBlocks.forEach(val => {\n                    _blocks[val].style.fillStyle = _BStyle.holdColor\n                })\n\n                draw()\n                callbackEvt('click', evt, shape)\n            })\n        }\n    })\n}","\n\nexport function getEleInfo () {\n    this.ele = document.querySelector(this.options.el)\n    let { width, height } = window.getComputedStyle(this.ele) \n\n    width = parseInt(width)\n    height = parseInt(height)\n    \n    this.eleBCR = { width, height } \n}\n    \nexport function init () {\n    this.setHistory()\n    this.getEleInfo()\n    this.appendCanvasElement()\n\n    this.setMapData()\n    this.mouseEvt()\n}\n\nexport function setMapData () {\n    let opt = {\n        // 默认地图缩放大小 1\n\t\tmapScale: 1,\n\t\t// 地图边界\n\t\tboundary: {},\n\t\t// 区块\n        blocks: [],\n        // 是否有点\n        hasPoint: false,\n        // 地图移动距离\n\t\tmapTranslateX: 0,\n\t\tmapTranslateY: 0,\n\t\t// hash ID\n\t\tcolorsHash: {},\n\t\t// 当前鼠标移入区索引\n\t\tmouseMoveIndex: -1,\n\t\t// 选择区域\n        holdBlocks: []\n    }\n\n    opt.usrData = this.options.usrData\n    opt.mirror = this.options.map.mirror || {}\n\n    opt = this.setBoundary(opt)\n    opt = this.setBlocks(opt)\n    opt = this.setTextName(opt)\n    opt = this.getPoints(opt)\n\n    this.history.map[this.history.index] = opt\n\n    this.setMapScale()\n}\n","\n/**\n * @description 动画\n * @param {Object} opts\n * @param {Number} delay 每帧时间 \n * @param {Number} duration 动画运行时间\n * @param {Function} delta 对进度操作\n * @callback callback 每一帧操作\n * @callback doneback 每一帧操作\n */\nexport function stepAnimate (opts) {\n    let start = new Date\n\n    let id = setInterval(() => {\n        let timePassed = new Date - start\n        let progress = timePassed / opts.duration\n\n        if (progress > 1) progress = 1\n\n        let delta = opts.delta(progress)\n        opts.callback(delta)\n\n        if (progress == 1) {\n            clearInterval(id)\n            if (opts.doneback) opts.doneback()\n        }\n    }, opts.delay || 1000/60)\n}\n\n/**\n * @deprecated 直线运动\n * @param {Number} progress 进度\n */\nexport function linearAni (progress) {\n    return progress\n}\n\nexport function quadAni (progress) {\n    return Math.pow(progress, 5)\n}\n\nexport function backAni (progress) {\n    let x = 2\n    return Math.pow(progress, 2) * ((x+1) * progress - x)\n}\n\nexport function makeEaseInOutAni (delta) {\n    return function(progress) {\n        return 1 - delta(1 - progress)\n    }\n}","import {\n    stepAnimate,\n    linearAni,\n    quadAni,\n    backAni,\n    makeEaseInOutAni\n} from './swing.js'\n\n/**\n * 缓入 从小到1进入\n * @param {number} time 动画时长\n * @param {number} coe 系数\n */\nexport function fadeIn (time = 1000, coe = .3) {\n    let currentMap = this.history.map[this.history.index]\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n    this.drawAllBoundary()\n    let _canvas = this.createTemCanvas()\n    this.clearCanvasCtx(true)\n    this.inAnimate = true\n    \n    stepAnimate({\n        duration: time,\n        delta: makeEaseInOutAni(quadAni),\n        callback: delta => {\n            let progress = delta * coe\n            let scaleDelta = progress + (1 - coe)\n            this.ctx.save()\n            this.ctx.globalAlpha = delta\n            this.ctx.translate(\n                this.mainCanvas.width / 2 * (coe - progress),\n                this.mainCanvas.height / 2 * (coe - progress)\n            )\n            this.ctx.scale(scaleDelta, scaleDelta)\n            this.clearCanvasCtx(true)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n\n}\n\n/**\n * 缓出 从1到系数缩小淡出\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function fadeOut (time = 600, coe = .3) {\n    let _canvas = this.createTemCanvas()\n    let _coe = 1 - coe\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: backAni,\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = (1 - delta) * coe + _coe \n            this.clearCanvasCtx()\n            this.ctx.globalAlpha = 1 - delta\n            this.ctx.translate(\n                this.mainCanvas.width / 2 * coe * delta,\n                this.mainCanvas.height / 2 * coe * delta\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n\n/**\n * 放大缓出\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function zoomOut (time = 600, coe = .3) {\n    let _canvas = this.createTemCanvas()\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: backAni,\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = delta * coe + 1 \n            this.clearCanvasCtx()\n            this.ctx.globalAlpha = 1 - delta\n            this.ctx.translate(\n                - this.ctxW / 2 * delta * coe,\n                - this.ctxH / 2 * delta * coe\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n\n/**\n * 缩小缓入\n * @param {number} time 动画时长\n * @param {number} coe 缩放系数\n */\nexport function zoomIn (time = 1000, coe = .3) {\n    let currentMap = this.history.map[this.history.index]\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n    this.drawAllBoundary()\n    let _canvas = this.createTemCanvas()\n    this.clearCanvasCtx(true)\n    this.inAnimate = true\n\n    stepAnimate({\n        duration: time,\n        delta: makeEaseInOutAni(quadAni),\n        callback: delta => {\n            this.ctx.save()\n            let reDelta = .3 - delta * coe + 1 \n            this.ctx.globalAlpha = delta\n            this.ctx.translate(\n                -this.ctxW / 2 * coe * (1 - delta),\n                -this.ctxH / 2 * coe * (1 - delta)\n            )\n            this.ctx.scale(reDelta, reDelta)\n            this.clearCanvasCtx(true)\n            this.ctx.drawImage(_canvas, 0, 0)\n            this.ctx.restore()\n        },\n        doneback: () => {\n            this.inAnimate = false\n        }\n    })\n}\n","\n/**\n * @returns {Object} - 返回一个生成的canvas元素\n */\nexport function createCanvas () {\n    let canvas = document.createElement('canvas')\n    let W = this.eleBCR.width\n    let H = this.eleBCR.height\n    \n    this.ctxW = canvas.width = W * this.DPI\n    this.ctxH = canvas.height = H * this.DPI\n\n    canvas.style.position = 'absolute'\n    canvas.style.width = W + 'px'\n    canvas.style.height = H + 'px'\n\n    return canvas\n}\n\nexport function appendCanvasElement () {\n    this.mainCanvas = this.createCanvas()\n    this.hitMainCanvas = this.createCanvas()\n\n    this.ctx = this.mainCanvas.getContext('2d')\n    this.hitCtx = this.hitMainCanvas.getContext('2d')\n\n    this.ele.appendChild( this.mainCanvas )\n}\n\n// 生成临时 canvas 保存当前画布信息\nexport function createTemCanvas (ctx = this.ctx) {\n    let ctxW = this.mainCanvas.width\n    let ctxH = this.mainCanvas.height\n    let _canvas = this.createCanvas()\n    let copyCtxImg = ctx.getImageData(0, 0, ctxW, ctxH)\n    \n    _canvas.getContext('2d').putImageData(copyCtxImg, 0, 0)\n    return _canvas\n}\n\n\n/**\n * @description 画布清除\n * @param {Boolean} notHit 不要清除 hitCtx,默认 false 清除\n */\nexport function clearCanvasCtx (notHit) {\n    this.ctx.clearRect(0, 0, this.ctxW, this.ctxH)\n    \n    if (!notHit) {\n        this.hitCtx.clearRect(0, 0, this.ctxW, this.ctxH)\n    }\n}","\n/**\n * @name 获取区块信息\n * @param {Array} data 坐标点集合\n * @param {Object} mirrorOpt 镜像设置\n */\nexport default function getMapDataInfo (data, mirrorOpt) {\n    let xArr = []\n    let yArr = []\n    let centroid = {}\n    let coordinates = []\n    let l = data.length\n\n    for (let i = 0; i < l; i++) {\n        let _data = computedData(data[i], mirrorOpt)\n        xArr.push(_data.x.start, _data.x.end)\n        yArr.push(_data.y.start, _data.y.end)\n        centroid = _data.centroid\n        coordinates.push( _data.coordinates )\n    }\n\n    let xStart = Math.min.apply({}, xArr)\n    let yStart = Math.min.apply({}, yArr)\n    let xEnd = Math.max.apply({}, xArr)\n    let yEnd = Math.max.apply({}, yArr)\n    let width = xEnd - xStart\n    let height = yEnd - yStart\n\n    return {\n        width,\n        height,\n        coordinates,\n        x: {\n            start: xStart,\n            end: xEnd,\n            center: xStart + width / 2\n        },\n        y: {\n            start: yStart,\n            end: yEnd,\n            center: yStart + height / 2\n        },\n        centroid\n    }\n}\n\n\n/**\n * @name 计算数组的最大值最小值\n * @param {Array} arr - 数组\n * @param {Object} mirrorOpt 镜像设置\n */\nfunction computedData (arr, mirrorOpt) {\n    if (!Array.isArray(arr))\n        return console.warn(`你需要传入数组!`)\n\n    let width = 0\n    let height = 0\n    let xStart = 0\n    let yStart = 0\n    let xEnd = 0\n    let yEnd = 0\n    let xArr = []\n    let yArr = []\n    let coordinates = []\n\n    for (let i = 0, l = arr.length; i < l; i+=2) {\n        let x = mirrorOpt && mirrorOpt.x ? mirrorOpt.x - arr[i] : arr[i]\n        let y = mirrorOpt && mirrorOpt.y ? mirrorOpt.y - arr[i + 1] : arr[i + 1]\n\n        xArr.push(x)\n        yArr.push(y)\n        coordinates.push([x, y])\n    }\n\n    xStart = Math.min.apply({}, xArr)\n    xEnd = Math.max.apply({}, xArr)\n\n    yStart = Math.min.apply({}, yArr)\n    yEnd = Math.max.apply({}, yArr)\n\n    width = xEnd - xStart\n    height = yEnd - yStart\n\n    return {\n        width,\n        height,\n        x: {\n            center: xStart + width/2,\n            start: xStart, \n            end: xEnd\n        },\n        y: {\n            center: yStart + height/2,\n            start: yStart, \n            end: yEnd\n        },\n        centroid: getCentroid(arr, mirrorOpt),\n        coordinates\n    }\n}\n\n/**\n * @name 质点中心\n * @param {Array} arr 数组\n * @param {Object} mirrorOpt 镜像设置\n */\nfunction getCentroid (arr, mirrorOpt) {\n    let twoTimesSignedArea = 0\n    let cxTimes6SignedArea = 0\n    let cyTimes6SignedArea = 0\n\n    let l = arr.length\n\n    for ( let i = 0; i < l; i+=2) {\n        let _x = parseFloat(arr[i])\n        let _y = parseFloat(arr[i+1])\n        let __x = parseFloat(arr[i+2])\n        let __y = parseFloat(arr[i+3])\n\n        if (i + 3 > arr.length) {\n            __x = parseFloat(arr[0])\n            __y = parseFloat(arr[1])\n        }\n\n        let twoSA = _x * __y - __x * _y\n\n        twoTimesSignedArea += twoSA\n        cxTimes6SignedArea += (_x + __x) * twoSA\n        cyTimes6SignedArea += (_y + __y) * twoSA\n    }\n    \n    let sixSignedArea = 3 * twoTimesSignedArea\n    let x = ~~(cxTimes6SignedArea / sixSignedArea)\n    let y = ~~(cyTimes6SignedArea / sixSignedArea)\n\n    if (mirrorOpt) {\n        x = mirrorOpt.x ? mirrorOpt.x - x : x\n        y = mirrorOpt.y ? mirrorOpt.y - y : y\n    }\n\n    return {x, y}\n}\n","export function setDPIFontSize (style, DPI) {\n    \n    let reSet = (font) => {\n        let fontArr = font.match(/([\\d\\.]+)(px|em)/)\n        let szie = parseFloat(fontArr[1])\n        let unit = fontArr[2]\n        font = font.replace(fontArr[0], szie * DPI + unit)\n        return font\n    }\n\n    if (!style) return\n\n    Object.keys(style).forEach(val => {\n        if (val === 'font') {\n            style[val] = reSet(style[val])\n        }\n    })\n\n    return style\n}\n\nexport function setCtxState (styleOption, ctx) {\n    ctx.beginPath()\n\n    for (let i in styleOption) {\n        ctx[i] = styleOption[i]\n    }\t\n    return ctx\n}","\nexport function selfStyle (style) {\n    for (let i in style) {\n        this[i] = style[i]\n    }\n}\n\n/**\n * @name 取2个数字之前的随机数据\n * @param {Number} min 最小值\n * @param {Number} max 最大值\n */\nexport function getBetweenRandom (min, max) {\n    return min + max * Math.random()\n}\n\n/**\n * @description 点在多边形内算法，JS判断一个点是否在一个复杂多边形的内部,\n * https://blog.csdn.net/heyangyi_19940703/article/details/78606471\n */\nexport function isInPolygon (checkPoint, polygonPoints) { \n    let counter = 0 \n    let xinters \n    let p1\n    let p2  \n    let pointCount = polygonPoints.length  \n    \n    p1 = polygonPoints[0] \n\n    for (let i = 1; i <= pointCount; i++) {  \n        p2 = polygonPoints[i % pointCount]\n        if (  \n            checkPoint[0] > Math.min(p1[0], p2[0]) &&  \n            checkPoint[0] <= Math.max(p1[0], p2[0])  \n        ) {  \n            if (checkPoint[1] <= Math.max(p1[1], p2[1])) {  \n                if (p1[0] != p2[0]) {  \n                    xinters =  \n                        (checkPoint[0] - p1[0]) *  \n                            (p2[1] - p1[1]) /  \n                            (p2[0] - p1[0]) +  \n                        p1[1];  \n                    if (p1[1] == p2[1] || checkPoint[1] <= xinters) {  \n                        counter++  \n                    }  \n                }  \n            }  \n        }  \n        p1 = p2\n    }  \n    if (counter % 2 == 0) {  \n        return false \n    } else {  \n        return true \n    }  \n}\n\n/**\n * @name 缩放坐标\n * @param {Array} arr 数据\n * @param {Number} scale 缩放大小 \n */\nexport function scaleCoordinates (arr, scale) {\n    let result = []\n    for (let i = 0, l = arr.length; i < l; i++) {\n        result[i] = []\n        let inner = arr[i]\n        for (let n = 0, m = inner.length; n < m; n++) {\n            result[i].push([\n                inner[n][0] * scale,\n                inner[n][1] * scale\n            ])\n        }\n    }\n    return result\n}","import getMapDataInfo from './getMapBlockInfo.js'\nimport { setDPIFontSize } from '../style.js'\nimport {\n    selfStyle,\n    getBetweenRandom,\n    isInPolygon,\n    scaleCoordinates\n} from './methods.js'\n\nexport function setBoundary (opt) {\n    let boundary = this.options.map.boundary\n\n    boundary = Object.assign({}, boundary, getMapDataInfo(boundary.data))\n\n    // 镜像设置\n    let { coordinates } = setMirror(opt, boundary, boundary.data)\n    boundary.coordinates = coordinates\n\n    this.setColorsHashID(opt, boundary, true)\n\n    // 设置最小缩放\n    opt.mapScale = Math.min(\n        this.hitMainCanvas.width / boundary.width, \n        this.hitMainCanvas.height / boundary.height\n    )\n\n    opt.boundary = boundary\n    opt.mapTranslateX = 0\n    opt.mapTranslateY = 0\n\n    return opt\n}\n\n\nexport function setBlocks (opt) {\n    const blocks = this.options.map.blocks\n    const areas = blocks.data\n    let _BC = blocks.color\n    let colorIsArr = Array.isArray(_BC)\n    let colorLen = colorIsArr ? _BC.length : 0\n\n    for (let i = 0, l = areas.length; i < l; i++) {\n        let _data = areas[i]\n        let _style = blocks.style\n\n        // 1.优先使用块内样式\n        if (_data.style && _data.style.hasOwnProperty('block')) {\n            _style = _data.style.block\n        }\n        // 随机色或自定颜色\n        if (!_data.style && blocks.color) {\n\n            if (colorIsArr) {\n                _style.fillStyle = _BC[ i % colorLen ]\n            } \n            else if (typeof _BC === 'boolean') {\n                _style.fillStyle = this.getRandomColor()\n            }\n        }\n\n        // 镜像设置\n        Object.assign(_data.map, setMirror(opt, opt.boundary, _data.map))\n\n        _data = Object.assign({}, _data, _data.map, {\n            style: new selfStyle( _style ),\n            index: i,\n            over: false,\n            hold: false\n        })\n        \n        this.setColorsHashID(opt, _data)\n\n        opt.blocks.push(_data)\n    }\n\n    return opt\n}\n\n\n/**\n * 设置文字\n * @description 对文字的大小按屏幕地 devicePixelRatio 缩放\n */\nexport function setTextName (map) {\n    // 获取区块名称用户设置\n    let cityName = this.options.map.blocks.cityName\n\n    if (!cityName) return map\n\n    // 判断是否已经处理过高清屏文字\n    if (!cityName.fixed) {\n        Object.keys(cityName).forEach(name => {\n            Object.assign(\n                cityName[name], \n                setDPIFontSize(cityName[name], this.DPI)\n            )\n        })\n    }\n\n    // 检查是否有默认的属性\n    if (!cityName.hasOwnProperty('normal')) {\n        return console.warn(`Don't find cityName has 'normal'`)\n    }\n\n    map.blocks.forEach(val => {\n        val.nameStyle = {\n            normal: new selfStyle(cityName.normal),\n            hover: new selfStyle(cityName.hover ? cityName.hover : cityName.normal)\n        }\n    })\n\n    cityName.fixed = true\n\n    return map\n}\n\n/**\n * 设置区块内的点\n */\nexport function getPoints (map) {\n    let blocks = this.options.map.blocks\n    let point = blocks.point\n\n    if (!point) return map\n\n    map.hasPoint = true\n\n    let minR = Math.min.apply({}, point.r)\n    let maxR = Math.max.apply({}, point.r)\n\n    let getPoint = val => {\n        let x = -1\n        let y = -1\n        while (true) {\n            x = ~~getBetweenRandom(val.x.start, val.x.end)\n            y = ~~getBetweenRandom(val.y.start, val.y.end)\n            if (isInPolygon([x,y], val.coordinates[0])) {\n                return [x,y]\n            }\n        }\n    }\n\n    map.blocks.forEach((val, index) => {\n        if (point.size) {\n            let size = point.size\n            let pointSize = 1\n            let hasUserSet = false\n            let _blockPointSize\n\n            if (val.blocks && val.blocks.point && val.blocks.point.size) {\n                _blockPointSize = val.blocks.point.size\n                hasUserSet = true\n\n                if (Array.isArray(_blockPointSize)) {\n                    hasUserSet = 'array'\n                    pointSize = _blockPointSize.length\n                } else if (!isNaN(_blockPointSize)) {\n                    pointSize = _blockPointSize\n                }\n            } else {\n                if (size.min !== size.max) {\n                    pointSize = ~~getBetweenRandom(size.min, size.max)\n                }\n            }\n\n            val.point = []\n\n            for (let i = 0; i < pointSize; i++) {\n                let { x, y } = val.centroid\n                let usrSet = {}\n\n                if (point.fun) {\n                    usrSet = point.fun( index, val, this.options.usrData )\n                }\n\n                if (size.min !== size.max) [x,y] = getPoint(val)\n\n                let color = ''\n                let r = 0\n\n                if (hasUserSet && hasUserSet === 'array') {\n                    color = 'color' in _blockPointSize[i] ?\n                        _blockPointSize[i].color :\n                        point.color[~~getBetweenRandom(0, point.color.length)]\n\n                    r = 'r' in _blockPointSize[i] ?\n                        _blockPointSize[i].r :\n                        getBetweenRandom(minR, maxR)\n                } else {\n                    color = point.color[~~getBetweenRandom(0, point.color.length)]\n\n                    r = getBetweenRandom(minR, maxR)\n                }\n\n                usrSet = Object.assign({}, {\n                    r,\n                    color,\n                    position: {x, y}\n                }, usrSet)\n\n                usrSet.r *= this.DPI\n\n                val.point.push(usrSet)\n            }\n        }\n    })\n\n    return map\n}\n\n/**\n * 缩放地图\n * @param {number} val 缩放地图\n */\nexport function setMapScale (val) {\n    let history = this.history\n    let currentMap = history.map[history.index]\n    let defVal = currentMap.mapScale\n\n    history.map[history.index].mapScale = val || defVal\n\n    this.scaleBoundary(currentMap)\n    this.scaleBlocks(currentMap)\n    this.scalePoints(currentMap)\n}\n\n/**\n * 缩放边界\n */\nexport function scaleBoundary (map) {\n    if (map.mapTranslateX === 0) {\n        map.mapTranslateX =  0 - map.boundary.x.start * map.mapScale\n        map.mapTranslateY = 0 - map.boundary.y.start * map.mapScale\n    }\n    \n    map.boundary._coordinates = scaleCoordinates(map.boundary.coordinates, map.mapScale)\n}\n\n/**\n * 缩放块\n * @param {object} map 当前地图\n */\nexport function scaleBlocks (map) {\n    for (let i = 0, l = map.blocks.length; i < l; i++) {\n        let inner = map.blocks[i]\n        inner._coordinates = scaleCoordinates(inner.coordinates, map.mapScale)\n    }\n}\n\n/**\n * 缩放点的位置\n * @param {object} map 当前地图\n */\nexport function scalePoints (map) {\n    let blocks = map.blocks\n\n    if (!map.hasPoint) return\n\n    for (let i = 0, l = blocks.length; i < l; i++) {\n        blocks[i]._point = []\n        let pointL = blocks[i].point.length\n\n        for (let p = 0; p < pointL; p++) {\n            let point = blocks[i].point[p]\n\n            blocks[i]._point.push( {\n                x: point.position.x * map.mapScale,\n                y: point.position.y * map.mapScale,\n                r: point.r,\n                color: point.color\n            })\n        }\n    }\n}\n\n\n/**\n * 备案区块信息\n * @param {object} map 当前地图\n * @param {object} data 区块信息\n * @param {boolean} transparentBg 背景透明化\n */\nexport function setColorsHashID (map, data, transparentBg = false) {\n    let hash = map.colorsHash\n\n    while (true) {\n        const colorKey = this.getRandomColor()\n\n        if (!hash[colorKey]) {\n            hash[colorKey] = data\n            data.hitStyle = new selfStyle({\n                fillStyle: transparentBg ? 'rgba(0,0,0,0)' :  colorKey\n            })\n            return\n        }\n    }\n}\n\n/**\n * 随机生成 RGB 颜色\n */\nexport function getRandomColor () {\n    const r = Math.round(Math.random() * 255)\n    const g = Math.round(Math.random() * 255)\n    const b = Math.round(Math.random() * 255)\n    return `rgb(${r},${g},${b})`\n}\n\nexport function hasSameHashColor (color, shape) {\n    return shape.color === color\n}\n\n\n/**\n * 缩放地图\n * @param {number} val 缩放大小\n */\nexport function scaleMap (val) {\n    let currentMap = this.history.map[this.history.index]\n\n    this.setMapScale(val)\n    this.translateCtx(currentMap, currentMap.mapTranslateX, currentMap.mapTranslateY)\n\n    window.requestAnimationFrame(() => this.drawAllBoundary() )\n}\n\nexport function getLikeGeoJson (arr) {\n    let result = []\n\n    for (let i = 0, l = arr.length; i < l; i+=2) {\n        result.push([arr[i], arr[i+1]])\n    }\n    return result\n}\n\n\nfunction setMirror (opt, boundary, arr) {\n    if (opt.mirror) {\n        let mirrorOpt = {}\n        \n        if (opt.mirror.horizontal) mirrorOpt.x = boundary.x.end + boundary.x.start\n        if (opt.mirror.vertical) mirrorOpt.y = boundary.y.end + boundary.y.start\n\n        arr = getMapDataInfo(arr, mirrorOpt)\n    }\n\n    return arr\n}","\n/**\n * @name 绘制所有区块\n */\nexport function drawAllBoundary () {\n    let currentMap = this.history.map[this.history.index]\n\n    this.clearCanvasCtx()\n    // 区\n    this.drawBlockBoundary(currentMap)\n    // 边界\n    this.drawMainBoundary(currentMap)\n    // 点\n    this.drawBlockPoints(currentMap)\n    // 城市名\n    this.drawBlockText(currentMap)\n\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0)\n    this.hitCtx.setTransform(1, 0, 0, 1, 0, 0)\n}\n\n/**\n * @name 绘制内部区块\n * @param {Object} obj 绘制的区块信息\n */\nexport function drawBoundary (obj) {\n    let style = obj.style\n    let fillStyle = style.fillStyle\n    let styleOption = {}\n\n    if (obj.hold) {\n        fillStyle = style.holdColor || fillStyle\n    } else {\n        fillStyle = obj.over ? style.hoverColor : fillStyle\n    }\n\n    styleOption = {\n        fillStyle,\n        lineWidth: style.lineWidth,\n        strokeStyle: style.strokeStyle\n    }\n\n    for (let i = 0, l = obj._coordinates.length; i < l; i++) {\n        this.drawLine(\n            this.ctx,\n            obj._coordinates[i],\n            styleOption\n        )\n\n        this.drawLine(\n            this.hitCtx,\n            obj._coordinates[i],\n            obj.hitStyle\n        )\n    }\n}\n\n/**\n * 绘制主要边界\n */\nexport function drawMainBoundary (map) {\n    this.drawBoundary(map.boundary)\n}\n\n/**\n * 绘制区块边界\n */\nexport function drawBlockBoundary (map) {\n    let l = map.blocks.length\n\n    for (let i = 0; i < l; i++) {\n        this.drawBoundary( map.blocks[i] )\n    }\n}\n\n/**\n * @name 绘制圆\n * @param {Object} ctx canvas 对象\n * @param {Object} option 设置\n * @param {Objetc} style 样式\n */\nexport function drawArc (ctx, option, style) {\n    ctx = this.setCtxState(style, ctx)\n    ctx.arc(\n        option.x, // x\n        option.y, // y\n        option.r, // R 半径\n        option.s, // 开始角度\n        option.e, // 结束角度\n        option.d  // 顺时针(false)\n    )\n    ctx.fill()\n    ctx.closePath()\n    ctx.restore()\n}\n\n/**\n * 绘制名字\n * @param {object} map 当前地图信息\n */\nexport function drawBlockText (map, ctx = this.ctx) {\n    \n    let cityName = this.options.map.blocks.cityName\n    if (!cityName) return\n\n    let blocks = map.blocks\n    let move = cityName.move || {x: 0, y: 0}\n\n    for (let i = 0, l = blocks.length; i < l; i++) {\n        let city = blocks[i]\n        let style = false\n        let width = city.width * map.mapScale\n        let txtWidth = ctx.measureText(city.name).width\n\n        if (city.name) {\n            if (city.hold) {\n                style = city.nameStyle.hold\n            } else if (city.over) {\n                style = city.nameStyle.hover\n            }\n\n            if (!style) {\n                style = city.nameStyle.normal\n            }\n\n            if (txtWidth < width / this.textVsWidth || city.index === map.mouseMoveIndex) {\n                let x = city.centroid.x * map.mapScale + move.x\n                let y = city.centroid.y * map.mapScale + move.y\n\n                ctx.save()\n                ctx.shadowColor = 'rgba(128, 128, 128, .8)'\n                ctx.shadowOffsetX = this.DPI\n                ctx.shadowOffsetY = this.DPI\n                \n                this.drawText({\n                    txt: city.name,\n                    x,\n                    y,\n                    align: cityName.align\n                }, style, ctx)\n                ctx.restore()\n            }\n        }\n    }\n}\n\n/**\n * 绘制文字\n * @param {object} textObj 文字信息\n * @param {object} style 样式\n * @param {canvas} ctx canvas\n */\nexport function drawText (textObj, style, ctx = this.ctx) {\n    let {txt, x, y, align} = textObj\n   \n    ctx.save()\n    ctx = this.setCtxState(style, ctx)\n    ctx.textAlign = align || 'center'\n    ctx.textBaseline = \"middle\"\t\n    ctx.fillText(txt, x, y)\t\t\n    ctx.restore()\n}\n\n/**\n * 中心坐标 \n */\nexport function drawCenterLine () {\n    this.ctx.beginPath()\n    this.ctx.strokeStyle = 'red'\n    this.ctx.moveTo(0, this.ctxH/2)\n    this.ctx.lineTo(this.ctxW, this.ctxH/2)\n    this.ctx.stroke()\n\n    this.ctx.beginPath()\n    this.ctx.strokeStyle = 'red'\n    this.ctx.moveTo(this.ctxW/2,0)\n    this.ctx.lineTo(this.ctxW/2, this.ctxH)\n    this.ctx.stroke()\n}\n\n/**\n * 绘制区块中随机点\n */\nexport function drawBlockPoints (map) {\n    const data = map.blocks\n\n    if (!map.hasPoint) return map\n\n    for (let i = 0, l = data.length; i < l; i++) {\n        let _W = data[i].width * map.mapScale\n\n        data[i]._point.forEach(point => {\n            // 当宽度大于5倍点半径时，点才显示\n            if (_W > point.r * 5) {\n                this.drawArc(\n                    this.ctx,\n                    {\n                        x: point.x,\n                        y: point.y,\n                        r: point.r,\n                        s: 0,\n                        e: Math.PI * 2,\n                        d: false\n                    },\n                    {\n                        fillStyle: point.color\n                    }\n                )\n            }\n        })\n    }\n}\n\n\n/**\n * @name 绘制线\n * @param {Object} ctx - canvas 对象\n * @param {Array} data - 绘制的线\n * @param {Object} style - 绘制的样式\n */\nexport function drawLine (ctx, data, style) {\n    ctx = this.setCtxState(style, ctx)\n\n    for (let i = 0, l = data.length; i < l; i++) {\n        let x = data[i][0]\n        let y = data[i][1]\n        if (i === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    }\n    \n    ctx.lineJoin = 'round'\n    ctx.closePath()\n    ctx.stroke()\n    ctx.fill()\n\n    return ctx\n}\n\n/**\n * \n * @param {object} map 地图\n * @param {number} x x轴偏移量\n * @param {number} y y轴偏移量\n */\nexport function translateCtx (map, x = 0, y = 0) {\n    let X = (this.ctxW - map.boundary.width * map.mapScale)/ 2 + x\n    let Y = (this.ctxH - map.boundary.height * map.mapScale)/ 2 + y\n\n    this.clearCanvasCtx()\n    this.ctx.translate(X, Y)\n    this.hitCtx.translate(X, Y)\n}\n","export class History {\n\n    constructor () {\n        this.map = [],\n        this.index = 0\n    }\n\n    go (val) {\n        let history = this.constructor.history\n        let mapSize = history.map.length\n        \n        if (isNaN(val)) {\n            return console.warn(`val is not a Number`)\n        }\n\n        val = parseInt(val)\n        if (!val) return\n\n        // 重置新的地图状态\n        let i = history.index\n        let max = mapSize -1\n        i += val\n        \n        if (val > 0) {\n            i = i >  max ? i = max : i\n        } else {\n            i = i < 0 ? 0 : i\n        }\n        \n        this.constructor.zoomOut()\n        this.constructor.history.index = i\n\n        setTimeout(() => {\n            this.constructor.fadeIn()\n        }, 1000)\n    }\n\n    back () {\n        // 重置新的地图状态\n        let i = this.constructor.history.index\n\n        if (!i) return\n\n        this.constructor.fadeOut()\n\n        this.constructor.history.index = i -1 > 0 ? i -1 : 0\n\n        setTimeout(() => {\n            this.constructor.zoomIn()\n        }, 1000)\n    }\n\n    forward () {\n        let history = this.constructor.history\n        let i = history.index\n        // 重置新的地图状态\n        i += 1\n\n        if (i >= history.map.length) return\n\n        this.constructor.history.index = i\n\n        this.constructor.zoomOut()\n\n        setTimeout(() => {\n            this.constructor.fadeIn()\n        }, 1000)\n    }\n\n    // key 用于区分渲染\n    push ({boundary, blocks, key, usrData} = opt) {\n        let _ = this.constructor\n        let _H = _.history\n        let setNewMap = () => {\n            let optMap = _.options.map\n    \n            optMap.boundary.data = boundary\n            optMap.blocks.data = blocks\n            _.options.usrData = usrData || {}\n            // 重置地图数据\n            _.setMapData()\n    \n            _H.map[_H.index].parentID = key\n        }\n        \n        _.zoomOut()\n        _H.index += 1\n        \n        let oldMap = _H.map[_H.index]\n        \n        if (oldMap) {\n            if (oldMap.parentID !== key) {\n                _H.map.length = _H.index\n                setNewMap()\n            }\n        } else {\n            setNewMap()\n        }\n\n        setTimeout(() => {\n            _.fadeIn()\n        }, 1000)\n    }\n}\n\nexport function setHistory () {\n    this.history = new this.History()\n    this.history.__proto__.constructor = this\n}","/**\n * CMAP\n * @description Canvas 地图\n * @author ekxt <https://ektx.github.io/>\n * @see https://github.com/ektx/canvas-map\n * @date 2017-10-27\n */\n\nimport * as event from './event/index.js'\nimport * as init from './init.js'\nimport * as animate from './animate/index.js'\nimport * as canvas from './canvas.js'\nimport * as compute from './compute/index.js'\nimport * as draw from './draw.js'\nimport * as style from './style.js'\nimport * as history from './history.js'\n\nconst myCmap = {\n\t...event,\n\t...init,\n\t...animate,\n\t...canvas,\n\t...compute,\n    ...draw,\n\t...style,\n\t...history\n}\n\nclass CMap {\n\tconstructor (options) {\n\t\tthis.options = options\n\t\tthis.DPI = window.devicePixelRatio\n\t\tthis.mainCanvas = null\n\t\tthis.ctx = null\n\t\tthis.hitCtx = null\n\t\tthis.ctxW = 0\n\t\tthis.ctxH = 0\n\t\tthis.inAnimate = false\n\t\t// 文字与区块宽度比（文字最大可用大小）\n\t\tthis.textVsWidth = 2\n\t}\n}\n\nObject.keys(myCmap).forEach(name => {\n\tObject.defineProperty(CMap.prototype, name, {\n\t\tvalue: myCmap[name]\n\t})\n})\n\nexport default CMap"],"names":["mouseEvt","historyIndex","currentMap","_blocks","_opt","this","options","_callback","callback","selectedMode","_selectedMode","style","_BStyle","map","blocks","mouseMove","hold","x","y","status","checkInMap","index","pixel","hitCtx","getImageData","data","color","shape","colorsHash","draw","translateCtx","mouseEvtData","mapX","mapY","drawAllBoundary","callbackEvt","type","evt","hasOwnProperty","ele","addEventListener","offsetX","DPI","offsetY","inAnimate","history","mapTranslateX","mapTranslateY","buttons","_x","_y","moveIndex","mouseMoveIndex","over","holdBlocks","includes","inHoldBlocks","_index","indexOf","splice","push","length","fillStyle","forEach","val","holdColor","getEleInfo","document","querySelector","el","width","height","window","getComputedStyle","parseInt","eleBCR","init","setHistory","appendCanvasElement","setMapData","opt","mapScale","boundary","hasPoint","usrData","mirror","setBoundary","setBlocks","setTextName","getPoints","setMapScale","stepAnimate","opts","start","Date","id","setInterval","progress","duration","delta","clearInterval","doneback","delay","quadAni","Math","pow","backAni","makeEaseInOutAni","fadeIn","time","coe","_canvas","createTemCanvas","clearCanvasCtx","scaleDelta","ctx","save","globalAlpha","translate","mainCanvas","scale","drawImage","restore","fadeOut","_coe","reDelta","zoomOut","ctxW","ctxH","zoomIn","createCanvas","canvas","createElement","W","H","position","hitMainCanvas","getContext","appendChild","copyCtxImg","putImageData","notHit","clearRect","getMapDataInfo","mirrorOpt","xArr","yArr","centroid","coordinates","l","i","_data","computedData","end","xStart","min","apply","yStart","xEnd","max","yEnd","center","arr","Array","isArray","console","warn","getCentroid","twoTimesSignedArea","cxTimes6SignedArea","cyTimes6SignedArea","parseFloat","__x","__y","twoSA","sixSignedArea","setDPIFontSize","Object","keys","font","fontArr","match","szie","unit","replace","reSet","setCtxState","styleOption","beginPath","selfStyle","getBetweenRandom","random","isInPolygon","checkPoint","polygonPoints","xinters","p1","p2","counter","pointCount","scaleCoordinates","result","inner","n","m","assign","setMirror","setColorsHashID","areas","_BC","colorIsArr","colorLen","_style","block","getRandomColor","cityName","fixed","name","nameStyle","normal","hover","point","minR","r","maxR","getPoint","size","_blockPointSize","pointSize","hasUserSet","isNaN","usrSet","fun","defVal","scaleBoundary","scaleBlocks","scalePoints","_coordinates","_point","pointL","p","transparentBg","hash","colorKey","hitStyle","round","hasSameHashColor","scaleMap","requestAnimationFrame","getLikeGeoJson","horizontal","vertical","drawBlockBoundary","drawMainBoundary","drawBlockPoints","drawBlockText","setTransform","drawBoundary","obj","hoverColor","lineWidth","strokeStyle","drawLine","drawArc","option","arc","s","e","d","fill","closePath","move","city","txtWidth","measureText","textVsWidth","shadowColor","shadowOffsetX","shadowOffsetY","drawText","txt","align","textObj","textAlign","textBaseline","fillText","drawCenterLine","moveTo","lineTo","stroke","_W","PI","lineJoin","X","Y","History","[object Object]","constructor","mapSize","setTimeout","key","_","_H","setNewMap","optMap","parentID","oldMap","__proto__","myCmap","event","animate","compute","CMap","devicePixelRatio","defineProperty","prototype","value"],"mappings":"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"}